[Default]
Version = 1
Strip Chars = \/\|;{}<>\'
Strip Chars Mode = 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Account related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[isKnownAccount]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT uid FROM account WHERE uid = ?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1

[createAccount]
SQL1_1 = INSERT INTO account SET uid = ?, name = ?, player_character = ?
SQL1_INPUTS = 1,2,3
Return InsertID = true

[getAccountPID]
SQL1_1 = SELECT pid FROM account WHERE uid = ? AND player_character = ?
SQL1_INPUTS = 1,2
OUTPUT = 1

[startAccountSession]
SQL1_1 = UPDATE account SET name = ?, last_connect_at = NOW(), total_connections = total_connections + 1 WHERE uid = ? AND player_character = ?
SQL1_INPUTS = 2,1,3

[endAccountSession]
SQL1_1 = UPDATE account SET last_disconnect_at = NOW() WHERE uid = ? AND pid = ?
SQL1_INPUTS = 1,2

[getAccountStats]
SQL1_1 = SELECT score, kills, deaths, clan_id, locker FROM account WHERE uid = ? AND pid = ?
SQL1_INPUTS = 1,2
OUTPUT = 1,2,3,4,5

[addAccountKill]
SQL1_1 = UPDATE account SET kills = kills + 1 WHERE pid = ?
SQL1_INPUTS = 1

[addAccountDeath]
SQL1_1 = UPDATE account SET deaths = deaths + 1 WHERE pid = ?
SQL1_INPUTS = 1

[getAccountScore]
SQL1_1 = SELECT score FROM account WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[setAccountScore]
SQL1_1 = UPDATE account SET score = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[modifyAccountScore]
SQL1_1 = UPDATE account SET score = score + ? WHERE pid = ?
SQL1_INPUTS = 1,2

[updateLocker]
SQL1_1 = UPDATE account SET locker = ? WHERE uid = ? AND pid = ?
SQL1_INPUTS = 1,2,3

[getLocker]
SQL1_1 = SELECT locker FROM account WHERE uid = ?
SQL1_INPUTS = 1
OUTPUT = 1




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  ExileLife Admin Tools
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[hasAdminAccess]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT player_uid FROM administration WHERE player_uid = ? AND disabled = 0) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1

[getAdmin]
SQL1_1 = SELECT permissionLevel, locked, disabled FROM administration WHERE player_uid = ?
SQL1_INPUTS = 1
OUTPUT = 1-STRING,2,3

[lockAdmin]
SQL1_1 = UPDATE administration SET locked = 1 WHERE player_uid = ?
SQL1_INPUTS = 1

[unlockAdmin]
SQL1_1 = UPDATE administration SET locked = 0 WHERE player_uid = ?
SQL1_INPUTS = 1

;; Logging

[logKick]
SQL1_1 = UPDATE administration_logging SET kick_counter = kick_counter + 1, last_kicked_by = ?, last_kicked_reason = ? WHERE playerUID = ?
SQL1_INPUTS = 1,2,3

[logWarning]
SQL1_1 = UPDATE administration_logging SET warning_counter = warning_counter + 1, last_warned_by = ?, last_warning_reason = ? WHERE playerUID = ?
SQL1_INPUTS = 1,2,3

[checkStatus]
SQL1_1 = SELECT warning_counter, kick_counter FROM administration_logging WHERE playerUID = ?
SQL1_INPUTS = 1
OUTPUT = 1,2

[resetWarning]
SQL1_1 = UPDATE administration_logging SET warning_counter = 0 WHERE playerUID = ?
SQL1_INPUTS = 1

[setBanned]
SQL1_1 = UPDATE administration_logging SET warning_counter = "AUTO-BANNED",  last_warned_by = "AUTO-BANNED", last_warning_reason = "AUTO-BANNED", kick_counter = "AUTO-BANNED", last_kicked_by = "AUTO-BANNED", last_kicked_reason = "AUTO-BANNED" WHERE playerUID = ?
SQL1_INPUTS = 1

[isKnownTroll]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT playerUID FROM administration_logging WHERE playerUID = ?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1

[insertTroll]
SQL1_1 = INSERT INTO administration_logging SET playerUID = ?, player_name = ?, warning_counter = 0, last_warned_by = "N/A", last_warning_reason = "N/A", kick_counter = 0, last_kicked_by = "N/A", last_kicked_reason = "N/A"
SQL1_INPUTS = 1,2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Blackmarket
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[addStock]
SQL1_1 = UPDATE blackmarket SET stock = CASE WHEN (stock + ?) > 99 THEN 99 ELSE stock + ? END WHERE classname = ?
SQL1_INPUTS = 1,1,2

[removeStock]
SQL1_1 = UPDATE blackmarket SET stock = stock - ? WHERE classname = ?
SQL2_1 = DELETE FROM blackmarket WHERE stock <= 0
SQL1_INPUTS = 1,2

[getMarketItem]
SQL1_1 = SELECT classname, stock FROM blackmarket WHERE classname = ?
SQL1_INPUTS = 1
OUTPUT = 1-STRING,2-STRING

[getBlackMarketInventory]
SQL1_1 = SELECT * FROM blackmarket
OUTPUT = 1-STRING,2-STRING

[createItem]
SQL1_1 = INSERT INTO blackmarket SET classname = ?, stock = ?
SQL1_INPUTS = 1,2

[checkItem]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT classname FROM blackmarket WHERE classname = ?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Clan related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createClan]
SQL1_1 = INSERT INTO clan SET leader_uid = ?, name = ?, pid = ?
SQL1_INPUTS = 1,2,3
Return InsertID = true

[setAccountClanLink]
SQL1_1 = UPDATE account SET clan_id = ? WHERE uid = ? AND pid = ?
SQL1_INPUTS = 1,2,3

[unLinkClanLink]
SQL1_1 = UPDATE account SET clan_id = NULL WHERE uid = ? AND pid = ?
SQL1_INPUTS = 1,2,3

[updateClanLeader]
SQL1_1 = UPDATE clan SET leader_uid = ?, pid = ? WHERE id = ?
SQL1_INPUTS = 1,2,3

[deleteClan]
SQL1_1 = DELETE FROM clan WHERE id = ?
SQL1_INPUTS = 1

[loadClansIdPage]
SQL1_1 = SELECT id FROM clan LIMIT ?,?
SQL1_INPUTS = 1,2
OUTPUT = 1

[getClanInfo]
SQL1_1 = SELECT name,leader_uid,pid FROM clan WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1-STRING,2-STRING,3

[getClanMembers]
SQL1_1 = SELECT uid,name FROM account WHERE clan_id = ?
SQL1_INPUTS = 1
OUTPUT = 1-STRING,2-STRING

[getClanMarkers]
SQL1_1 = SELECT id,markerType,positionArr,color,icon,iconSize,label,labelSize FROM clan_map_marker WHERE clan_id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2,3,4,5-STRING,6,7-STRING,8

[addMarker]
SQL1_1 = INSERT INTO clan_map_marker SET clan_id = ?, markerType = 0, positionArr = ?, color = ?, icon = ?, iconSize = ?, label = ?, labelSize = ?
SQL1_INPUTS = 1,2,3,4,5,6,7
Return InsertID = true

[addPoly]
SQL1_1 = INSERT INTO clan_map_marker SET clan_id = ?, markerType = 1, positionArr = ?, color = ?
SQL1_INPUTS = 1,2,3
Return InsertID = true

[deleteMarker]
SQL1_1 = DELETE FROM clan_map_marker WHERE id = ?
SQL1_INPUTS = 1

[getClanName]
SQL1_1 = SELECT name FROM clan WHERE clan_id = ?
SQL1_INPUTS = 1
OUTPUT = 1-STRING

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Construction related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[insertConstruction]
SQL1_1 = INSERT INTO construction SET
SQL1_2 = class = ?,
SQL1_3 = account_uid = ?,
SQL1_4 = position_x = ?,
SQL1_5 = position_y = ?,
SQL1_6 = position_z = ?,
SQL1_7 = direction_x = ?,
SQL1_8 = direction_y = ?,
SQL1_9 = direction_z = ?,
SQL1_10 = up_x = ?,
SQL1_11 = up_y = ?,
SQL1_12 = up_z = ?,
SQL1_13 = territory_id = ?,
SQL1_14 = pid = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12-NULL,13
Return InsertID = true

[deleteConstruction]
SQL1_1 = DELETE FROM construction WHERE id = ?
SQL1_INPUTS = 1

[loadConstructionIdPage]
SQL1_1 = SELECT id FROM construction WHERE deleted_at IS NULL LIMIT ?,?
SQL1_INPUTS = 1,2
OUTPUT = 1

[loadConstruction]
SQL1_1 = SELECT id,class,account_uid,spawned_at,position_x,position_y,position_z,direction_x,direction_y,direction_z,up_x,up_y,up_z,is_locked,pin_code,territory_id,deleted_at,damage,pid FROM construction WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3-STRING,4-STRING,5,6,7,8,9,10,11,12,13,14,15-STRING,16,17,18,19

[countConstruction]
SQL1_1 = SELECT COUNT(*) FROM construction
OUTPUT = 1

[constructionSetPinCode]
SQL1_1 = UPDATE construction SET pin_code= ? WHERE id = ?
SQL1_INPUTS = 1,2

[upgradeObject]
SQL1_1 = UPDATE construction SET class=? WHERE id = ?
SQL1_INPUTS = 1,2

[addDoorLock]
SQL1_1 = UPDATE construction SET pin_code = ?,is_locked = -1 WHERE id = ?
SQL1_INPUTS = 1,2

[removeDoorLock]
SQL1_1 = UPDATE construction SET pin_code = '000000', is_locked = 0, last_updated_at = NOW() WHERE id = ?
SQL1_INPUTS = 1

[updateLock]
SQL1_1 = UPDATE construction SET is_locked = ? WHERE id = ?
SQL1_INPUTS = 1,2

[updateConstructionTerritoryIDs]
SQL1_1 = UPDATE construction SET territory_id = ? WHERE id IN(?)
SQL1_INPUTS = 1,2

[updateDamage]
SQL1_1 = UPDATE construction SET damage = ? WHERE id = ?
SQL1_INPUTS = 1,2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Containers related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[insertContainer]
SQL1_1 = INSERT INTO container SET
SQL1_2 = class = ?,
SQL1_3 = account_uid = ?,
SQL1_4 = position_x = ?,
SQL1_5 = position_y = ?,
SQL1_6 = position_z = ?,
SQL1_7 = direction_x = ?,
SQL1_8 = direction_y = ?,
SQL1_9 = direction_z = ?,
SQL1_10 = up_x = ?,
SQL1_11 = up_y = ?,
SQL1_12 = up_z = ?,
SQL1_13 = cargo_items = ?,
SQL1_14 = cargo_magazines = ?,
SQL1_15 = cargo_weapons = ?,
SQL1_16 = cargo_container = ?,
SQL1_17 = money = ?,
SQL1_18 = pin_code = ?,
SQL1_19 = territory_id = ?,
SQL1_20 = pid = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-NULL,19
Return InsertID = true

[deleteContainer]
SQL1_1 = DELETE FROM container WHERE id = ?
SQL1_INPUTS = 1

[loadContainerIdPage]
SQL1_1 = SELECT id FROM container WHERE deleted_at IS NULL LIMIT ?,?
SQL1_INPUTS = 1,2
OUTPUT = 1

[loadContainer]
SQL1_1 = SELECT id,class,account_uid,is_locked,position_x,position_y,position_z,direction_x,direction_y,direction_z,up_x,up_y,up_z,cargo_items,cargo_magazines,cargo_weapons,pin_code,territory_id,abandoned,deleted_at,money,pid FROM container WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3-STRING,4,5,6,7,8,9,10,11,12,13,14,15,16,17-STRING,18,19-STRING,20,21,22

[loadContainerCargo]
SQL1_1 = SELECT cargo_container FROM container WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1

[updateContainer]
SQL1_1 = UPDATE container SET
SQL1_2 = is_locked = ?,
SQL1_3 = position_x = ?,
SQL1_4 = position_y = ?,
SQL1_5 = position_z = ?,
SQL1_6 = direction_x = ?,
SQL1_7 = direction_y = ?,
SQL1_8 = direction_z = ?,
SQL1_9 = up_x = ?,
SQL1_10 = up_y = ?,
SQL1_11 = up_z = ?,
SQL1_12 = cargo_items = ?,
SQL1_13 = cargo_magazines = ?,
SQL1_14 = cargo_weapons = ?,
SQL1_15 = cargo_container = ?,
SQL1_16 = territory_id = ?,
SQL1_17 = money = ?,
SQL1_18 = pid = ?
SQL1_19 = WHERE id = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18

[containerSetPinCode]
SQL1_1 = UPDATE container SET pin_code= ? WHERE id = ?
SQL1_INPUTS = 1,2

[updateContainerTerritoryIDs]
SQL1_1 = UPDATE container SET territory_id = ? WHERE id IN(?)
SQL1_INPUTS = 1,2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Exile Escape
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[addAccountWin]
SQL1_1 = UPDATE account SET wins = wins + 1 WHERE uid = ?
SQL1_INPUTS = 1

[addAccountMatches]
SQL1_1 = UPDATE account SET matches = matches + 1 WHERE uid = ?
SQL1_INPUTS = 1

[createMatch]
SQL1_1 = INSERT INTO game_data SET players = ?, total_players = ?
SQL1_INPUTS = 1,2
Return InsertID = true

[setMatchWinner]
SQL1_1 = UPDATE game_data SET winner_uid = ?, win_type = ? WHERE id = ?
SQL1_INPUTS = 1,2,3

[getEscapeAccountStats]
SQL1_1 = SELECT wins, matches FROM account WHERE uid = ?
SQL1_INPUTS = 1
OUTPUT = 1,2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ExileLife Player related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createPlayerExileLife]
SQL1_1 = INSERT INTO player_ExileLife SET pid = ?,
SQL1_2 = account_uid = ?,
SQL1_3 = name = ?,
SQL1_4 = player_class = ?,
SQL1_5 = player_character = ?,
SQL1_6 = jobs_current = ?,
SQL1_7 = jobs_completed = ?,
SQL1_8 = jobs_failed = ?,
SQL1_9 = player_gang = ?,
SQL1_10 = crimes_committed = ?,
SQL1_11 = message_threads = ?,
SQL1_12 = blood_type = ?,
SQL1_13 = exile_date = NOW()
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12

[getClassMembers]
SQL1_1 = SELECT pid FROM player_ExileLife WHERE player_class = ?
SQL1_INPUTS = 1
OUTPUT = 1

[checkPlayerExileLife]
SQL1_1 = SELECT pid FROM player_exilelife WHERE account_uid = ? AND player_character = ?
SQL1_INPUTS = 1,2
OUTPUT = 1

[deletePlayerExileLife]
SQL1_1 = DELETE FROM player_ExileLife WHERE account_uid = ?
SQL1_INPUTS = 1

[deletePlayerInfo]
SQL1_1 = UPDATE  player_ExileLife SET character_first_name = "", character_last_name = "", character_age = 0, blood_type = "", gasmask_time = 0, character_reason_for_exile = "" WHERE pid = ?
SQL1_INPUTS = 1

[updatePlayerToGuard]
SQL1_1 = UPDATE player_ExileLife SET player_class = "Guard", player_gang = "Guard" WHERE pid = ?
SQL1_INPUTS = 1

[updateplayerclass]
SQL1_1 = UPDATE player_ExileLife SET player_class = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[getPlayersPrisonAllowance]
SQL1_1 = SELECT prison_allowance FROM player_ExileLife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[updatePlayersPrisonAllowance]
SQL1_1 = UPDATE player_ExileLife SET prison_allowance= ? WHERE pid = ?
SQL1_INPUTS = 1,2

[loadPlayerExileLife]
SQL1_1 = SELECT character_first_name,
SQL1_2 = character_last_name,
SQL1_3 = character_age,
SQL1_4 = character_reason_for_exile,
SQL1_5 = player_class,
SQL1_6 = player_rank,
SQL1_7 = player_gang,
SQL1_8 = lockpick_level,
SQL1_9 = lockpick_exp,
SQL1_10 = strength_level,
SQL1_11 = strength_exp,
SQL1_12 = speed_level,
SQL1_13 = speed_exp,
SQL1_14 = heal_level,
SQL1_15 = heal_exp,
SQL1_16 = repair_level,
SQL1_17 = repair_exp,
SQL1_18 = player_character,
SQL1_19 = pid,
SQL1_20 = clan_id,
SQL1_21 = jobs_current,
SQL1_22 = jobs_completed,
SQL1_23 = jobs_failed,
SQL1_24 = crimes_committed,
SQL1_25 = message_threads,
SQL1_26 = exile_date,
SQL1_27 = blood_type,
SQL1_28 = gasmask_time
SQL1_29 = FROM player_ExileLife
SQL1_30 = WHERE account_uid = ?
SQL1_31 = AND player_character = ?
SQL1_INPUTS = 1,2
OUTPUT = 1-STRING,2-STRING,3-STRING,4-STRING,5-STRING,6,7-STRING,8,9,10,11,12,13,14,15,16,17,18-STRING,19,20,21,22,23,24,25,26,27-STRING,28



[updatePlayerExileLife]
SQL1_1 = UPDATE player_ExileLife SET
SQL1_2 = name = ?,
SQL1_3 = player_character = ?,
SQL1_4 = player_class = ?,
SQL1_5 = player_rank = ?,
SQL1_6 = player_gang = ?,
SQL1_7 = lockpick_level = ?,
SQL1_8 = lockpick_exp = ?,
SQL1_9 = strength_level = ?,
SQL1_10 = strength_exp = ?,
SQL1_11 = speed_level = ?,
SQL1_12 = speed_exp = ?,
SQL1_13 = heal_level = ?,
SQL1_14 = heal_exp = ?,
SQL1_15 = repair_level  = ?,
SQL1_16 = repair_exp = ?,
SQL1_17 = gasmask_time = ?
SQL1_18 = WHERE pid = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17

[getPlayerInfo]
SQL1_1 = SELECT character_first_name,
SQL1_2 = character_last_name,
SQL1_3 = character_age,
SQL1_4 = character_reason_for_exile,
SQL1_5 = pid
SQL1_6 = FROM player_exilelife WHERE account_uid = ? AND player_character = ?
SQL1_INPUTS = 1,2
OUTPUT = 1-STRING,2-STRING,3,4-STRING,5

[getPlayerName]
SQL1_1 = SELECT character_first_name, character_last_name FROM player_ExileLife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1-STRING,2-STRING


[updatePlayerInfo]
SQL1_1 = UPDATE player_ExileLife SET character_first_name = ?,
SQL1_2 = character_last_name = ?,
SQL1_3 = character_age = ?,
SQL1_4 = character_reason_for_exile = ?
SQL1_5 = WHERE account_uid = ? AND player_character = ?
SQL1_INPUTS = 1,2,3,4,5,6

[getPlayerMessages]
SQL1_1 = SELECT message_threads FROM player_exilelife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[updatePlayerMessages]
SQL1_1 = UPDATE player_exilelife SET message_threads = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[setBloodType]
SQL1_1 = UPDATE player_exilelife SET blood_type = ? WHERE pid = ?
SQL1_INPUTS = 1,2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Gang related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createGang]
SQL1_1 = INSERT INTO gang SET gang = ?,  tax = ?,  wage = ?,  bank = ?
SQL1_INPUTS = 1,2,3,4

[updateGangLeader]
SQL1_1 = UPDATE gang SET alpha_uid = ?, pid WHERE gang = ?
SQL1_INPUTS = 1,2,3

[updateGangBank]
SQL1_1 = UPDATE gang SET bank = ? WHERE gang = ?
SQL1_INPUTS = 1,2

[updateGangTax]
SQL1_1 = UPDATE gang SET tax = ? WHERE gang = ?
SQL1_INPUTS = 1,2

[updateGangWage]
SQL1_1 = UPDATE gang SET wage = ? WHERE gang = ?
SQL1_INPUTS = 1,2

[updateGangRespectLevel]
SQL1_1 = UPDATE gang SET minrespect = ? WHERE gang = ?
SQL1_INPUTS = 1,2

[updateGangTerritory]
SQL1_1 = UPDATE gang SET territoryradius = ? WHERE gang = ?
SQL1_INPUTS = 1,2

[loadGang]
SQL1_1 = SELECT alpha_pid, alpha_uid, tax, wage, bank, territoryradius, minrespect, members, membership_cost, blacklist, vault FROM gang WHERE gang = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3,4,5,6,7,8,9,10,11

[getGangMembers]
SQL1_1 = SELECT pid FROM player_ExileLife WHERE player_gang = ?
SQL1_INPUTS = 1
OUTPUT = 1

[getGangClassMembers]
SQL1_1 = SELECT pid FROM player_ExileLife WHERE player_gang = ? AND player_class = ?
SQL1_INPUTS = 1,2
OUTPUT = 1

[getGangNumbers]
SQL1_1 = SELECT members FROM gang WHERE gang = ?
SQL1_INPUTS = 1
OUTPUT = 1

[updateGangNumbers]
SQL1_1 = UPDATE gang SET members = ? WHERE gang = ?
SQL1_INPUTS = 1,2

[getMembershipCost]
SQL1_1 = SELECT membership_cost FROM gang WHERE gang = ?
SQL1_INPUTS = 1
OUTPUT = 1

[updateMembershipCost]
SQL1_1 = UPDATE gang SET membership_cost = ? WHERE gang = ?
SQL1_INPUTS = 1,2


[getGangBlacklist]
SQL1_1 = SELECT blacklist FROM gang WHERE gang = ?
OUTPUT = 1

[updateGangBlacklist]
SQL1_1 = UPDATE gang SET blacklist = ? WHERE gang = ?
SQL1_INPUTS = 1,2

[updateGangVault]
SQL1_1 = UPDATE gang SET vault = ? WHERE gang = ?
SQL1_INPUTS = 1,2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Garbage Collector
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Marks for deletion containers outside territories that were not accessed within ? days
[markDeleteOldContainers]
SQL1_1 = UPDATE container SET deleted_at = NOW() WHERE last_updated_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND territory_id IS NULL AND deleted_at IS NULL
SQL1_INPUTS = 1

; Removes containers outside territories that were not accessed within ? days
[deleteOldContainers]
SQL1_1 = DELETE FROM container WHERE deleted_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND territory_id IS NULL
SQL1_INPUTS = 1

; Marks contructions outside territories deleted after ? days
[markDeleteOldConstructions]
SQL1_1 = UPDATE construction SET deleted_at = NOW() WHERE last_updated_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND territory_id IS NULL AND deleted_at IS NULL
SQL1_INPUTS = 1

; Removes contructions outside territories after ? days
[deleteOldConstructions]
SQL1_1 = DELETE FROM construction WHERE deleted_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND territory_id IS NULL
SQL1_INPUTS = 1

; Marks for deletion vehicles that were not used within ? days
[markDeleteOldVehicles]
SQL1_1 = UPDATE vehicle SET deleted_at = NOW() WHERE last_updated_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND deleted_at IS NULL
SQL1_INPUTS = 1

; Removes vehicles that were not used within ? days
[deleteOldVehicles]
SQL1_1 = DELETE FROM vehicle WHERE deleted_at < DATE_SUB(NOW(), INTERVAL ? DAY)
SQL1_INPUTS = 1

; Marks territories (and all containers/constructions) that were not paid within ? days as deleted
[markDeleteUnpaidTerritories]
SQL1_1 = UPDATE territory SET deleted_at = NOW() WHERE last_paid_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND deleted_at IS NULL
SQL2_1 = UPDATE construction SET deleted_at = (select deleted_at from territory where territory.id=construction.territory_id and territory.deleted_at IS NOT NULL)
SQL3_1 = UPDATE container SET deleted_at = (select deleted_at from territory where territory.id=container.territory_id and territory.deleted_at IS NOT NULL)
SQL1_INPUTS = 1

; Removes territories (and all containers/constructions) that were not paid within ? days
[deleteUnpaidTerritories]
SQL1_1 = DELETE FROM territory WHERE deleted_at < DATE_SUB(NOW(), INTERVAL ? DAY)
SQL1_INPUTS = 1

[addAbandonedSafes]
SQL1_1 = UPDATE container SET abandoned = NOW(), pin_code = '0000' WHERE last_updated_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND class = "Exile_Container_Safe" AND territory_id IS NULL
SQL1_INPUTS = 1

[deleteBaseFlagStolen]
SQL1_1 = DELETE FROM territory WHERE flag_stolen_at < DATE_SUB(NOW(), INTERVAL ? DAY)
SQL1_INPUTS = 1

; Unlock doors and mark safes as abandoned if flag stolen for X days
[setAbandonedUnlocked]
SQL1_1 = UPDATE container SET abandoned = NOW(), pin_code = '0000' WHERE (SELECT flag_stolen_at from territory WHERE territory.id=container.territory_id AND territory.flag_stolen_at < DATE_SUB(NOW(), INTERVAL ? DAY));
SQL2_1 = UPDATE construction SET pin_code = '0000' WHERE (SELECT flag_stolen_at from territory WHERE territory.id = construction.territory_id AND territory.flag_stolen_at < DATE_SUB(NOW(), INTERVAL ? DAY)) AND pin_code != '000000'
SQL1_INPUTS = 1
SQL2_INPUTS = 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  ExileLife Housing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[addHouseDoorLock]
SQL1_1 = UPDATE territory SET doorlocks = ? WHERE id = ?
SQL1_INPUTS = 1,2

[updateHouseLock]
SQL1_1 = UPDATE territory SET doorlocks = ? WHERE id = ?
SQL1_INPUTS = 1,2

;; Is this even used? I cant find anything on it -Wolf 1/3/2017
[loadHouseDoors]
SQL1_1 = SET @connector = ?;
SQL2_1 = SELECT id,owner_uid,name,position_x,position_y,position_z,radius, level,flag_texture,flag_stolen,flag_stolen_by_uid,last_paid_at,build_rights,moderators,deleted_at,(SELECT COUNT(*)FROM construction c WHERE c.territory_id = @connector),pid FROM territory WHERE id = @connector
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3-STRING,4,5,6,7,8,9-STRING,10,11-STRING,12,13,14,15,16,17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Job Related Queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;
;; SYSTEM RELATED STUFFS
;;;;;;;;;;;;;;;;;;;;;;;;

[processJobs]
SQL1_1 = SELECT job_id, player_uid, job_board, job_name FROM jobs WHERE complete_by < NOW()
SQL2_1 = DELETE FROM jobs WHERE complete_by < NOW()
SQL1_INPUTS = 0
OUTPUT = 1,2-STRING,3-STRING,4-STRING

[jobsAddToQueue]
SQL1_1 = INSERT INTO jobs SET job_id = ?, player_uid = ?, job_name = ?, job_board = ?, complete_by = ?
SQL1_INPUTS = 1,2,3,4,5-TIME

[jobsUpdateQueue]
SQL1_1 = UPDATE jobs SET job_id = ?, player_uid = ?, job_name = ?, job_board = ?, complete_by = ?
SQL1_INPUTS = 1,2,3,4,5-TIME

[jobsRemoveFromQueue]
SQL1_1 = DELETE FROM jobs WHERE job_id = ? AND job_name = ?
SQL1_INPUTS = 1,2

[getJobsBoardJobs]
SQL1_1 = SELECT job_id, job_name, job_board, complete_by FROM jobs WHERE player_uid = 0
OUTPUT = 1,2-STRING,3-STRING,4

[returnJobIncrement]
SQL1_1 = SELECT AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'jobs'
SQL1_INPUTS = 1
OUTPUT = 1

;;;;;;;;;;;;;;;;;;;;;;;;
;; UPDATE RELATED STUFFS
;;;;;;;;;;;;;;;;;;;;;;;;

;; This updates all jobs fields (current,completed,failed) for character in player_exilelife

[updatePlayerJobs]
SQL1_1 = UPDATE player_exilelife SET jobs_current = ?, jobs_completed = ?, jobs_failed = ? WHERE pid = ?
SQL1_INPUTS = 1,2,3,4

[updatePlayerJobsCurrent]
SQL1_1 = UPDATE player_exilelife SET jobs_current = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[updatePlayerJobsCompleted]
SQL1_1 = UPDATE player_exilelife SET jobs_completed = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[updatePlayerJobsFailed]
SQL1_1 = UPDATE player_exilelife SET jobs_failed = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[updatePlayerlastGuardJobCompletedDate]
SQL1_1 = UPDATE player_exilelife SET jobs_guardlastcompleted = NOW() WHERE pid = ?
SQL1_INPUTS = 1



;;;;;;;;;;;;;;;;;;;;;;;;
;; GETTER RELATED STUFFS
;;;;;;;;;;;;;;;;;;;;;;;;

;; This gets all jobs fields (current,completed,failed) for character in player_exilelife

[getPlayerJobs]
SQL1_1 = SELECT jobs_current, jobs_completed, jobs_failed FROM player_exilelife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1,2,3

[getPlayerJobsCurrent]
SQL1_1 = SELECT jobs_current FROM player_exilelife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[getPlayerJobsCompleted]
SQL1_1 = SELECT jobs_completed FROM player_exilelife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[getPlayerJobsFailed]
SQL1_1 = SELECT jobs_failed FROM player_exilelife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[getPlayerlastGuardJobCompletedDate]
SQL1_1 = SELECT jobs_guardlastcompleted FROM player_exilelife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[getMessages]
SQL1_1 = SELECT id, name, recipients, messages, last_updated FROM messaging
OUTPUT = 1-STRING,2-STRING,3,4,5

[createNewThread]
SQL1_1 = INSERT INTO messaging SET id = ?,
SQL1_2 = name = ?,
SQL1_3 = recipients = ?,
SQL1_4 = messages = ?,
SQL1_5 = last_updated = ?
SQL1_INPUTS = 1,2,3,4,5-TIME

[addMessage]
SQL1_1 = UPDATE messaging SET messages = ?,
SQL1_2 = last_updated = ?
SQL1_3 = WHERE id = ?
SQL1_INPUTS = 1,2-TIME,3

[updateRecipients]
SQL1_1 = UPDATE messaging SET recipients = ? WHERE id = ?
SQL1_INPUTS = 1,2

[updateName]
SQL1_1 = UPDATE messaging SET name = ? WHERE id = ?
SQL1_INPUTS = 1,2

[deleteThread]
SQL1_1 = DELETE FROM messaging WHERE id = ?
SQL1_INPUTS = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Moneh moneh moneh
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[setPlayerMoney]
SQL1_1 = UPDATE player SET money = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[getPlayerMoney]
SQL1_1 = SELECT money FROM player WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[setContainerMoney]
SQL1_1 = UPDATE container SET money = ? WHERE pid = ?
SQL1_INPUTS = 1,2

[setVehicleMoney]
SQL1_1 = UPDATE vehicle SET money = ? WHERE pid = ?
SQL1_INPUTS = 1,2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Perks related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createPlayerPerks]
SQL1_1 = INSERT INTO player_perks SET account_uid = ?, name = ?
SQL1_INPUTS = 1,2

[hasDualAccountStatus]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT account_uid FROM player_perks WHERE account_uid = ? AND hasTwoClasses = 1) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1

[hasGuardAccess]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT account_uid FROM player_perks WHERE account_uid = ? AND hasGuardAccess = 1) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Players Personal Gang related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[joinGang]
SQL1_1 = UPDATE player_ExileLife SET player_gang= ? WHERE pid = ?
SQL1_INPUTS = 1,2


[getPlayersGangAllowance]
SQL1_1 = SELECT gang_allowance FROM player_ExileLife WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[updatePlayersGangAllowance]
SQL1_1 = UPDATE player_ExileLife SET gang_allowance= ? WHERE pid = ?
SQL1_INPUTS = 1,2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Player related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[hasAlivePlayer]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT account_uid FROM player WHERE account_uid = ? AND damage < 1) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1

[createPlayer]
SQL1_1 = INSERT INTO player SET pid = ?, account_uid = ?, name = ?
SQL1_INPUTS = 1,2,3

[insertPlayerHistory]
SQL1_1 = INSERT INTO player_history SET account_uid = ?, name = ?, position_x = ?, position_y = ?, position_z = ?
SQL1_INPUTS = 1,2,3,4,5

[deletePlayer]
SQL1_1 = DELETE FROM player WHERE pid = ?
SQL1_INPUTS = 1

[loadPlayer]
SQL1_1 = SELECT p.pid,
SQL1_2 = p.name,
SQL1_3 = p.account_uid,
SQL1_4 = p.damage,
SQL1_5 = p.hunger,
SQL1_6 = p.thirst,
SQL1_7 = p.alcohol,
SQL1_8 = p.oxygen_remaining,
SQL1_9 = p.bleeding_remaining,
SQL1_10 = p.hitpoints,
SQL1_11 = p.direction,
SQL1_12 = p.position_x,
SQL1_13 = p.position_y,
SQL1_14 = p.position_z,
SQL1_15 = p.assigned_items,
SQL1_16 = p.backpack,
SQL1_17 = p.backpack_items,
SQL1_18 = p.backpack_magazines,
SQL1_19 = p.backpack_weapons,
SQL1_20 = p.current_weapon,
SQL1_21 = p.goggles,
SQL1_22 = p.handgun_items,
SQL1_23 = p.handgun_weapon,
SQL1_24 = p.headgear,
SQL1_25 = p.binocular,
SQL1_26 = p.loaded_magazines,
SQL1_27 = p.primary_weapon,
SQL1_28 = p.primary_weapon_items,
SQL1_29 = p.secondary_weapon,
SQL1_30 = p.secondary_weapon_items,
SQL1_31 = p.uniform,
SQL1_32 = p.uniform_items,
SQL1_33 = p.uniform_magazines,
SQL1_34 = p.uniform_weapons,
SQL1_35 = p.vest,
SQL1_36 = p.vest_items,
SQL1_37 = p.vest_magazines,
SQL1_38 = p.vest_weapons,
SQL1_39 = p.money,
SQL1_40 = a.score,
SQL1_41 = a.kills,
SQL1_42 = a.deaths,
SQL1_43 = c.id,
SQL1_44 = c.name,
SQL1_45 = p.temperature,
SQL1_46 = p.wetness,
SQL1_47 = a.locker,
SQL1_48 = p.player_character
SQL1_49 = FROM player p
SQL1_50 = INNER JOIN account a
SQL1_51 = ON a.uid = p.account_uid
SQL1_52 = LEFT JOIN clan c
SQL1_53 = ON c.id = a.clan_id
SQL1_54 = WHERE p.account_uid = ? AND p.player_character = ?
SQL1_INPUTS = 1,2
OUTPUT = 1,2-STRING,3-STRING,4,5,6,7,8,9,10,11,12,13,14,15,16-STRING,17,18,19,20-STRING,21-STRING,22,23-STRING,24-STRING,25-STRING,26,27-STRING,28,29-STRING,30,31-STRING,32,33,34,35-STRING,36,37,38,39,40,41,42,43,44-STRING,45,46,47,48-STRING

[updatePlayer]
SQL1_1 = UPDATE player SET
SQL1_2 = name = ?,
SQL1_3 = damage  = ?,
SQL1_4 = hunger = ?,
SQL1_5 = thirst = ?,
SQL1_6 = alcohol = ?,
SQL1_7 = oxygen_remaining  = ?,
SQL1_8 = bleeding_remaining = ?,
SQL1_9 = hitpoints = ?,
SQL1_10 = direction = ?,
SQL1_11 = position_x = ?,
SQL1_12 = position_y = ?,
SQL1_13 = position_z = ?,
SQL1_14 = assigned_items = ?,
SQL1_15 = backpack = ?,
SQL1_16 = backpack_items = ?,
SQL1_17 = backpack_magazines = ?,
SQL1_18 = backpack_weapons = ?,
SQL1_19 = current_weapon = ?,
SQL1_20 = goggles = ?,
SQL1_21 = handgun_items = ?,
SQL1_22 = handgun_weapon = ?,
SQL1_23 = headgear = ?,
SQL1_24 = binocular = ?,
SQL1_25 = loaded_magazines = ?,
SQL1_26 = primary_weapon = ?,
SQL1_27 = primary_weapon_items = ?,
SQL1_28 = secondary_weapon = ?,
SQL1_29 = secondary_weapon_items = ?,
SQL1_30 = uniform = ?,
SQL1_31 = uniform_items = ?,
SQL1_32 = uniform_magazines = ?,
SQL1_33 = uniform_weapons = ?,
SQL1_34 = vest = ?,
SQL1_35 = vest_items = ?,
SQL1_36 = vest_magazines = ?,
SQL1_37 = vest_weapons = ?,
SQL1_38 = player_character = ?,
SQL1_39 = temperature = ?,
SQL1_40 = wetness = ?
SQL1_41 = WHERE pid = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Prisoner Criminal Record Queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createPrisonerRecord]
SQL1_1 = INSERT INTO records SET pid = ?
SQL1_INPUTS = 1

[updatePrisonerRecord]
SQL1_1 = UPDATE records SET last_scanned = NOW(), last_scanned_by = ?, wanted = ?, armed = ? WHERE pid = ?
SQL1_INPUTS = 1, 2, 3, 4

[updatePrisonerRecordAll]
SQL1_1 = UPDATE records SET last_scanned = ?, last_scanned_by = ?, wanted = ?, armed = ? WHERE pid = ?
SQL1_INPUTS = 1,2,3,4,5

[updatePrisonerWanted]
SQL1_1 = UPDATE records SET wanted = ? WHERE pid = ?
SQL1_INPUTS = 2

[getPrisonerRecord]
SQL1_1 = SELECT last_scanned, last_scanned_by, wanted, armed FROM records WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3,4


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Prisoner Infraction Queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createPrisonerInfraction]
SQL1_1 = INSERT INTO infractions SET pid = ?, crime = ?
SQL1_INPUTS = 1,2
Return InsertID = true

[createPrisonerInfractionHistory]
SQL1_1 = INSERT INTO infractions_history SET pid = ?, crime = ?, infraction_id = ?, scanned_by = ?, date = NOW(), wanted = ?, armed = ?, items = ?, notes = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8
Return InsertID = true

[getPrisonerInfractions]
SQL1_1 = SELECT id, crime FROM infractions WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3

[getInfractionHistory]
SQL1_1 = SELECT id, crime, wanted, armed, items, notes, fine_id, scanned_by, date, infraction_id FROM infractions_history WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3,4,5,6-STRING,7,8-STRING,9-STRING,10

[getInfractionIDHistory]
SQL1_1 = SELECT id, crime, wanted, armed, items, notes, fine_id, scanned_by, date, infraction_id FROM infractions_history WHERE infraction_id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3,4,5,6-STRING,7,8-STRING,9-STRING,10


[chkPrisonerInfractionID]
SQL1_1 = SELECT id FROM infractions WHERE pid = ? AND id = ?
SQL1_INPUTS = 1,2
OUTPUT = 1

[chkPrisonerHistoryInfractionID]
SQL1_1 = SELECT id FROM infractions_history WHERE pid = ? AND id = ?
SQL1_INPUTS = 1,2
OUTPUT = 1

[updateInfractionFine]
SQL1_1 = UPDATE infractions SET fine = ? WHERE id = ?
SQL1_INPUTS = 1,2

[updateInfractionHistoryFine]
SQL1_1 = UPDATE infractions_history SET fine_id = ? WHERE id = ?
SQL1_INPUTS = 1,2


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Prisoner Fines Queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createPrisonerFine]
SQL1_1 = INSERT INTO fines SET pid = ?, infraction_id = ?, amount_due = ?, date_due = ?, failure_penalty = ?, status = ?, date_issued = NOW()
SQL1_INPUTS = 1,2,3,4-TIME,5,6
Return InsertID = true

[getPrisonerFines]
SQL1_1 = SELECT status, amount_due, date_issued, date_due, date_paid, failure_penalty FROM fines WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1,2,3-STRING,4-STRING,5-STRING,6

[getFine]
SQL1_1 = SELECT status, amount_due, date_issued, date_due, date_paid, failure_penalty FROM fines WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2,3-STRING,4-STRING,5-STRING,6

[getInfractionFine]
SQL1_1 = SELECT status, amount_due, date_issued, date_due, date_paid, failure_penalty FROM fines WHERE infraction_id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2,3-STRING,4-STRING,5-STRING,6

[updateFineStatus]
SQL1_1 = UPDATE fines SET status = ? WHERE id = ?
SQL1_INPUTS = 1,2



;; [overduePrisonerFine]
;; SQL2_1 = DELETE FROM fines WHERE infraction = ?
;; SQL1_1 = UPDATE infractions SET status = 3 WHERE id = ?
;; SQL1_INPUTS = 1
;; SQL2_INPUTS = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	PLAYER REWARDS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[hasRewardsPlayer]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT uid FROM rewards WHERE uid = ?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
OUTPUT = 1

[loadRewards]
SQL1_1 = SELECT rewards_player FROM rewards WHERE uid = ?
SQL1_INPUTS = 1
OUTPUT = 1

[createRewards]
SQL1_1 = INSERT INTO rewards SET uid = ?, rewards_player = ?
SQL1_INPUTS = 1,2

[setPlayerRewards]
SQL1_1 = UPDATE rewards SET rewards_player = ? WHERE uid = ?
SQL1_INPUTS = 1,2 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Territory related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createTerritory]
SQL1_1 = INSERT INTO territory SET owner_uid = ?,
SQL1_2 = name = ?,
SQL1_3 = territoryzone = ?,
SQL1_4 = position_x = ?,
SQL1_5 = position_y = ?,
SQL1_6 = position_z = ?,
SQL1_7 = direction_x = ?,
SQL1_8 = direction_y = ?,
SQL1_9 = direction_z = ?,
SQL1_10 = up_x = ?,
SQL1_11 = up_y = ?,
SQL1_12 = up_z = ?,
SQL1_13 = radius = ?,
SQL1_14 = level = ?,
SQL1_15 = flag_texture = ?,
SQL1_16 = build_rights = ?,
SQL1_17 = moderators = ?,
SQL1_18 = pid = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
Return InsertID = true

[loadTerriotryIdPage]
SQL1_1 = SELECT id FROM territory WHERE deleted_at IS NULL LIMIT ?,?
SQL1_INPUTS = 1,2
OUTPUT = 1

[loadTerritory]
SQL1_1 = SET @connector = ?;
SQL2_1 = SELECT id, owner_uid, name, territoryzone, position_x, position_y, position_z, direction_x, direction_y, direction_z, up_x, up_y, up_z, doorlocks, radius, level, flag_texture, flag_stolen, flag_stolen_by_uid, last_paid_at, build_rights, moderators, deleted_at,(SELECT COUNT(*)FROM construction c WHERE c.territory_id = @connector), pid FROM territory WHERE id = @connector
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3-STRING,4-STRING,5,6,7,8,9,10,11,12,13,14,15,16,17-STRING,18,19-STRING,20,21,22,23,24,25

[setTerritoryLevel]
SQL1_1 = UPDATE territory SET level = ? WHERE id = ?
SQL1_INPUTS = 1,2

[setTerritorySize]
SQL1_1 = UPDATE territory SET radius = ? WHERE id = ?
SQL1_INPUTS = 1,2

[updateTerritoryBuildRights]
SQL1_1 = UPDATE territory SET build_rights = ? WHERE id = ?
SQL1_INPUTS = 1,2

[updateTerritoryModerators]
SQL1_1 = UPDATE territory SET moderators = ? WHERE id = ?
SQL1_INPUTS = 1,2

[maintainTerritory]
SQL1_1 = UPDATE territory SET last_paid_at = NOW(),xm8_protectionmoney_notified = 0 WHERE id = ?
SQL1_INPUTS = 1

[deleteTerritory]
SQL1_1 = DELETE FROM territory WHERE id = ?
SQL1_INPUTS = 1

[flagStolen]
SQL1_1 = UPDATE territory SET flag_stolen = 1, flag_stolen_by_uid = ?, flag_stolen_at = NOW() WHERE id = ?
SQL1_INPUTS = 1,2

[flagRestore]
SQL1_1 = UPDATE territory SET flag_stolen = 0, flag_stolen_by_uid = NULL, flag_stolen_at = NULL WHERE id = ?
SQL1_INPUTS = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Vehicle related queries
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[insertVehicle]
SQL1_1 = INSERT INTO vehicle SET
SQL1_2 = class = ?,
SQL1_3 = account_uid = ?,
SQL1_4 = is_locked = ?,
SQL1_5 = position_x = ?,
SQL1_6 = position_y = ?,
SQL1_7 = position_z = ?,
SQL1_8 = direction_x = ?,
SQL1_9 = direction_y = ?,
SQL1_10 = direction_z = ?,
SQL1_11 = up_x = ?,
SQL1_12 = up_y = ?,
SQL1_13 = up_z = ?,
SQL1_14 = pin_code = ?,
SQL1_15 = pid = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14
Return InsertID = true

[deleteVehicle]
SQL1_1 = DELETE FROM vehicle WHERE id = ?
SQL1_INPUTS = 1

[loadVehicleIdPage]
SQL1_1 = SELECT id FROM vehicle WHERE deleted_at IS NULL AND territory_id IS NULL LIMIT ?,?
SQL1_INPUTS = 1,2
OUTPUT = 1

[loadVehicle]
SQL1_1 = SELECT id,class,spawned_at,account_uid,is_locked,fuel,damage,hitpoints,position_x,position_y,position_z,direction_x,direction_y,direction_z,up_x,up_y,up_z,cargo_items,cargo_magazines,cargo_weapons,pin_code,vehicle_texture,deleted_at,money,pid FROM vehicle WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1,2-STRING,3-STRING,4-STRING,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-STRING,22,23,24

[loadVehicleContainer]
SQL1_1 = SELECT cargo_container FROM vehicle WHERE id = ?
SQL1_INPUTS = 1
OUTPUT = 1

[updateVehicle]
SQL1_1 = UPDATE vehicle SET
SQL1_2 = is_locked = ?,
SQL1_3 = fuel = ?,
SQL1_4 = damage = ?,
SQL1_5 = hitpoints = ?,
SQL1_6 = position_x = ?,
SQL1_7 = position_y = ?,
SQL1_8 = position_z = ?,
SQL1_9 = direction_x = ?,
SQL1_10 = direction_y = ?,
SQL1_11 = direction_z = ?,
SQL1_12 = up_x = ?,
SQL1_13 = up_y = ?,
SQL1_14 = up_z = ?,
SQL1_15 = cargo_items = ?,
SQL1_16 = cargo_magazines = ?,
SQL1_17 = cargo_weapons = ?,
SQL1_18 = cargo_container = ?,
SQL1_19 = money = ?
SQL1_20 = WHERE id = ?
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19

[updateVehicleSkin]
SQL1_1 = UPDATE vehicle SET vehicle_texture = ? WHERE id = ?
SQL1_INPUTS = 1,2

[vehicleSetPinCode]
SQL1_1 = UPDATE vehicle SET pin_code = ? WHERE id = ?
SQL1_INPUTS = 1,2


;;Exile Built-In Virtual Garage System

[storeVehicle]
SQL1_1 = UPDATE vehicle SET territory_id = ?, nickname = ?, last_updated_at = NOW() WHERE id = ?
SQL1_INPUTS = 1,2,3

[retrieveVehicle]
SQL1_1 = UPDATE vehicle SET territory_id = NULL, last_updated_at = NOW(), nickname = '' WHERE id = ?
SQL1_INPUTS = 1

[confirmVehicleOwnership]
SQL1_1 = SELECT id, territory_id FROM vehicle WHERE nickname = ?
SQL1_INPUTS = 1
OUTPUT = 1,2

[loadTerritoryVirtualGarage]
SQL1_1 = SELECT class, nickname FROM vehicle WHERE territory_id = ?
SQL1_INPUTS = 1
OUTPUT = 1-STRING,2-STRING

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VIRTUAL GARAGE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[loadPlayersVG]
SQL1_1 = SELECT vehicle_id, classname, damage, fuel, hitpoints, pin_code, account_uid FROM virtual_garage WHERE pid = ?
SQL1_INPUTS = 1
OUTPUT = 1, 2-STRING, 3, 4, 5, 6-STRING, 7-STRING

[retrieveVehicleVG]
SQL1_1 = SELECT classname, damage, fuel, hitpoints, pin_code, account_uid FROM virtual_garage WHERE vehicle_id = ? AND pid = ?
SQL1_INPUTS = 1,2
OUTPUT = 1-STRING,2,3,4,5-STRING,6-STRING

[addVehicleVG]
SQL1_1 = INSERT INTO virtual_garage SET classname = ?, account_uid = ?, pid = ?, fuel = ?, damage = ?, hitpoints = ?, pin_code = ?
SQL1_INPUTS = 1,2,3,4,5,6,7
Return InsertID = true

[removeVehicleVG]
SQL1_1 = DELETE FROM virtual_garage WHERE vehicle_id = ?
SQL1_INPUTS = 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	XM8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[getAllNotifTerritory]
SQL1_1 = SELECT id FROM territory WHERE last_paid_at < DATE_SUB(NOW(), INTERVAL ? - 1 DAY) and xm8_protectionmoney_notified = 0
SQL1_INPUTS = 1

[setTerritoryNotified]
SQL1_1 = UPDATE territory SET xm8_protectionmoney_notified = ? WHERE id = ?
SQL1_INPUTS = 1,2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  MarXet by WolfkillArcadia
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[createNewListing]
SQL1_1 = INSERT INTO marxet SET listingID = ?, itemAvailable = ?, itemArray = ?, price = ?, sellerUID = ?
SQL1_INPUTS = 1,2,3,4,5

[getListings]
SQL1_1 = SELECT listingID, itemAvailable, itemArray, price, sellerUID FROM marxet
OUTPUT = 1-STRING,2,3,4-STRING,5-STRING

[updateListing]
SQL1_1 = UPDATE marxet SET itemAvailable = 0 WHERE listingID = ?
SQL1_INPUTS = 1

[deleteListing]
SQL1_1 = DELETE FROM marxet WHERE listingID = ?
SQL1_INPUTS = 1

[restrictOldListings]
SQL1_1 = UPDATE marxet SET sellerUID = 0 WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND sellerUID != 0
SQL1_INPUTS = 1

[deleteOldListings]
SQL1_1 = DELETE FROM marxet WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY) AND sellerUID = 0
SQL1_INPUTS = 1

[getListingsCount]
SQL1_1 = SELECT COUNT(listingID) FROM marxet WHERE sellerUID = ?
SQL1_INPUTS = 1
OUTPUT = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 